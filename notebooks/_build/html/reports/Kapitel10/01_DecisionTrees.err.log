Traceback (most recent call last):
  File "/home/imarevic/anaconda3/envs/srh/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/imarevic/anaconda3/envs/srh/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/imarevic/anaconda3/envs/srh/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/home/imarevic/anaconda3/envs/srh/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/home/imarevic/anaconda3/envs/srh/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/home/imarevic/anaconda3/envs/srh/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/home/imarevic/anaconda3/envs/srh/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/imarevic/anaconda3/envs/srh/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np


class MyDecisionTreeRegressor:
    def __init__(self, max_depth=None, max_n_leaf_observations=1):
        self.max_depth = max_depth
        self.max_n_leaf_observation = max_n_leaf_observation
        self.tree = None

    def calculate_sse(self, y):
        return np.sum((y - np.mean(y)) ** 2)

    def get_overall_sse(self, left_y, right_y):
        left_sse = calculate_sse(left_y)
        right_sse = calculate_sse(right_y)
        return left_sse + right_sse

    def fit_tree(self, X, y, depth):
        n_samples, n_features = X.shape
        unique_y = np.unique(y)

        # Stopkriterien
        if len(unique_y) == self.max_n_leaf_observation:
            return {"value": unique_y[0]}
        if depth == self.max_depth:
            return {"value": np.mean(y)}

            # Greedy algorithm um den beste Split zu finden
            best_split = None
            best_sse = float("inf")

            for feature in range(n_features):
                thresholds = np.unique(X[:, feature])
                for threshold in thresholds:
                    left_indices = X[:, feature] <= threshold
                    right_indices = X[:, feature] > threshold

                    if np.any(left_indices) and np.any(right_indices):
                        left_y = y[left_indices]
                        right_y = y[right_indices]

                        sse = self.get_overall_sse(left_y, right_y)

                        if sse < best_sse:
                            best_sse = sse
                            best_split = {
                                "feature": feature,
                                "threshold": threshold,
                                "left": (X[left_indices], y[left_indices]),
                                "right": (X[right_indices], y[right_indices]),
                            }

            if best_split is None:
                return {"value": np.mean(y)}

            # rekursiver Aufruf der fir Methode
            left_tree = fit_tree(*best_split["left"], depth + 1)
            right_tree = fit_tree(*best_split["right"], depth + 1)

            return {
                "feature": best_split["feature"],
                "threshold": best_split["threshold"],
                "left": left_tree,
                "right": right_tree,
            }
        
        def fit(self, X, y)
            # wir updaten das Baum Attribut der Klasse als letzen Schritt
            self.tree = fit_tree(X, y, depth=0)
------------------

[0;36m  Input [0;32mIn [8][0;36m[0m
[0;31m    def fit(self, X, y)[0m
[0m                       ^[0m
[0;31mSyntaxError[0m[0;31m:[0m expected ':'

SyntaxError: expected ':' (1878234588.py, line 67)

